var tipuesearch = {"pages":[{"title":" DLA-Future-Fortran ","text":"DLA-Future-Fortran DLA-Future-Fortran is a Fortran interface for DLA-Future , a task-based linear algebra library providing GPU-enabled distributed eigensolver. DLA-Future is based on the pika library for concurrency and parallelism, and supports both Nvidia and AMD GPUs. Usage Initialization and finalization Before calling any DLA-Future routine, the library (and the underlying pika runtime) need to be initialized: call dlaf_initialize () DLA-Future should be finalized when it is no longer needed: call dlaf_finalize () Grid initialization DLA-Future needs to know how a matrix is distributed. A DLA-Future grid can be created directly on top of a BLACS grid, using the corresponding BLACS context: ! blacs_context is an existing BLACS context call dlaf_create_grid_from_blacs ( blacs_context ) When a grid is no longer needed, it can be freed: ! blacs_context is an existing BLACS context call dlaf_free_grid ( blacs_context ) ScaLAPACK drop-in DLA-Future-Fortran can be used as a ScaLAPACK drop-in. DLA-Future takes a subset of ScaLAPACK arguments. For example, workspaces are managed internally in DLA-Future . Example: Hermitian generalized eigensolver The following is an example of how a code using ScaLAPACK 's hermitian generalized eigensolver can be adapted to use DLA-Future instead: call mpi_init_thread(...) +call dlaf_initialize() call blacs_get(0, 0, blacs_context) call blacs_gridinit(blacs_context, ...) +call dlaf_create_grid_from_blacs(blacs_context) ! ... -! Workspaces setup (work, rwork, iwork) -call pzheevd('V', 'L', n, a, 1, 1, desca, w, z, 1, 1, descz, work, lwork, rwork, lrwork, iwork, liwork, info) +call call dlaf_pzheevd('L', n, a, 1, 1, desca, w, z, 1, 1, descz, info) -! Workspaces cleanup (work, rwork, iwork) ! ... +call dlaf_free_grid(blacs_context) call blacs_gridexit(blacs_context) +call dlaf_finalize() call mpi_finalize(...) Citation DLA-Future Conference Paper If you are using DLA-Future-Fortran , please cite the following conference paper in addition to the DLA-Future-Fortran and the DLA-Future repositories: @ InProceedings { 10.1007 / 978 - 3 - 031 - 61763 - 8 _13 , author = \"Solc{\\`a}, Raffaele and Simberg, Mikael and Meli, Rocco and Invernizzi, Alberto and Reverdell, Auriane and Biddiscombe, John\" , editor = \"Diehl, Patrick and Schuchart, Joseph and Valero-Lara, Pedro and Bosilca, George\" , title = \"DLA-Future: A Task-Based Linear Algebra Library Which Provides a GPU-Enabled Distributed Eigensolver\" , booktitle = \"Asynchronous Many-Task Systems and Applications\" , year = \"2024\" , publisher = \"Springer Nature Switzerland\" , address = \"Cham\" , pages = \"135--141\" , isbn = \"978-3-031-61763-8\" } Acknowledgements The development of DLA-Future-Fortran is supported by the following organizations: CSCS : Swiss National Supercomputing Center ETH Zurich : Swiss Federal Institute of Technology Zurich PASC : Platform for Advanced Scientific Computing","tags":"home","url":"index.html"},{"title":"dlaf_initialize – DLA-Future-Fortran","text":"public  subroutine dlaf_initialize() Initialize DLA-Future and pika Note If DLA-Future has already been initialized, this function does nothing. Arguments None","tags":"","url":"proc/dlaf_initialize.html"},{"title":"dlaf_finalize – DLA-Future-Fortran","text":"public  subroutine dlaf_finalize() Finalize DLA-Future and pika Note If DLA-Future has already been finalized, this function does nothing. Arguments None","tags":"","url":"proc/dlaf_finalize.html"},{"title":"dlaf_create_grid_from_blacs – DLA-Future-Fortran","text":"public  subroutine dlaf_create_grid_from_blacs(blacs_context) Create DLA-Future grid from existing BLACS context Warning The grid ordering is automatically inferred from the BLACS grid ordering. Only row-major and column-major\ngrids are supported (created with blacs_gridinit ). Grids created with blacs_gridmap are not supported. Arguments Type Intent Optional Attributes Name integer, intent(in) :: blacs_context BLACS context","tags":"","url":"proc/dlaf_create_grid_from_blacs.html"},{"title":"dlaf_free_grid – DLA-Future-Fortran","text":"public  subroutine dlaf_free_grid(blacs_context) Free DLA-Future grid corresponding to given BLACS context Warning Only the DLA-Future internal grid is freed. The associated BLACS grid will need to be freed explicitly\nwith blacs_gridexit . Arguments Type Intent Optional Attributes Name integer, intent(in) :: blacs_context BLACS context","tags":"","url":"proc/dlaf_free_grid.html"},{"title":"dlaf_pspotrf – DLA-Future-Fortran","text":"public  subroutine dlaf_pspotrf(uplo, n, a, ia, ja, desca, info) Cholesky decomposition for a distributed single-precision real symmetric positive definite matrix NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pspotrf.html"},{"title":"dlaf_pdpotrf – DLA-Future-Fortran","text":"public  subroutine dlaf_pdpotrf(uplo, n, a, ia, ja, desca, info) Cholesky decomposition for a distributed double-precision real symmetric positive definite matrix NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pdpotrf.html"},{"title":"dlaf_pcpotrf – DLA-Future-Fortran","text":"public  subroutine dlaf_pcpotrf(uplo, n, a, ia, ja, desca, info) Cholesky decomposition for a distributed single-precision complex Hermitian positive definite matrix NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pcpotrf.html"},{"title":"dlaf_pzpotrf – DLA-Future-Fortran","text":"public  subroutine dlaf_pzpotrf(uplo, n, a, ia, ja, desca, info) Cholesky decomposition for a distributed double-precision complex Hermitian positive definite matrix NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pzpotrf.html"},{"title":"dlaf_pssyevd – DLA-Future-Fortran","text":"public  subroutine dlaf_pssyevd(uplo, n, a, ia, ja, desca, w, z, iz, jz, descz, info) Eigensolver for a distributed single-precision real symmetric matrix . NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pssyevd.html"},{"title":"dlaf_pssyevd_partial_spectrum – DLA-Future-Fortran","text":"public  subroutine dlaf_pssyevd_partial_spectrum(uplo, n, a, ia, ja, desca, w, z, iz, jz, descz, il, iu, info) Eigensolver for a distributed single-precision real symmetric matrix . NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pssyevd_partial_spectrum.html"},{"title":"dlaf_pdsyevd – DLA-Future-Fortran","text":"public  subroutine dlaf_pdsyevd(uplo, n, a, ia, ja, desca, w, z, iz, jz, descz, info) Eigensolver for a distributed double-precision real symmetric matrix . NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pdsyevd.html"},{"title":"dlaf_pdsyevd_partial_spectrum – DLA-Future-Fortran","text":"public  subroutine dlaf_pdsyevd_partial_spectrum(uplo, n, a, ia, ja, desca, w, z, iz, jz, descz, il, iu, info) Eigensolver for a distributed double-precision real symmetric matrix . NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pdsyevd_partial_spectrum.html"},{"title":"dlaf_pcheevd – DLA-Future-Fortran","text":"public  subroutine dlaf_pcheevd(uplo, n, a, ia, ja, desca, w, z, iz, jz, descz, info) Eigensolver for a distributed single-precision complex Hermitian matrix . NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pcheevd.html"},{"title":"dlaf_pcheevd_partial_spectrum – DLA-Future-Fortran","text":"public  subroutine dlaf_pcheevd_partial_spectrum(uplo, n, a, ia, ja, desca, w, z, iz, jz, descz, il, iu, info) Eigensolver for a distributed single-precision complex Hermitian matrix . NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pcheevd_partial_spectrum.html"},{"title":"dlaf_pzheevd – DLA-Future-Fortran","text":"public  subroutine dlaf_pzheevd(uplo, n, a, ia, ja, desca, w, z, iz, jz, descz, info) Eigensolver for a distributed double-precision complex Hermitian matrix . NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pzheevd.html"},{"title":"dlaf_pzheevd_partial_spectrum – DLA-Future-Fortran","text":"public  subroutine dlaf_pzheevd_partial_spectrum(uplo, n, a, ia, ja, desca, w, z, iz, jz, descz, il, iu, info) Eigensolver for a distributed double-precision complex Hermitian matrix . NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pzheevd_partial_spectrum.html"},{"title":"dlaf_pssygvd – DLA-Future-Fortran","text":"public  subroutine dlaf_pssygvd(uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, info) Generalized eigensolver for a distributed single-precision symmetric-definite eigenproblem of the form NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pssygvd.html"},{"title":"dlaf_pssygvd_partial_spectrum – DLA-Future-Fortran","text":"public  subroutine dlaf_pssygvd_partial_spectrum(uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, il, iu, info) Generalized eigensolver for a distributed single-precision symmetric-definite eigenproblem of the form NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pssygvd_partial_spectrum.html"},{"title":"dlaf_pssygvd_factorized – DLA-Future-Fortran","text":"public  subroutine dlaf_pssygvd_factorized(uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, info) Generalized eigensolver for a distributed single-precision symmetric-definite eigenproblem of the form NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. NOTE: The matrix is assumed to be factorized; it is the result of a Cholesky factorization. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pssygvd_factorized.html"},{"title":"dlaf_pssygvd_partial_spectrum_factorized – DLA-Future-Fortran","text":"public  subroutine dlaf_pssygvd_partial_spectrum_factorized(uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, il, iu, info) Generalized eigensolver for a distributed single-precision symmetric-definite eigenproblem of the form NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. NOTE: The matrix is assumed to be factorized; it is the result of a Cholesky factorization. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pssygvd_partial_spectrum_factorized.html"},{"title":"dlaf_pdsygvd – DLA-Future-Fortran","text":"public  subroutine dlaf_pdsygvd(uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, info) Generalized eigensolver for a distributed double-precision symmetric-definite eigenproblem of the form NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pdsygvd.html"},{"title":"dlaf_pdsygvd_partial_spectrum – DLA-Future-Fortran","text":"public  subroutine dlaf_pdsygvd_partial_spectrum(uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, il, iu, info) Generalized eigensolver for a distributed double-precision symmetric-definite eigenproblem of the form NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pdsygvd_partial_spectrum.html"},{"title":"dlaf_pdsygvd_factorized – DLA-Future-Fortran","text":"public  subroutine dlaf_pdsygvd_factorized(uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, info) Generalized eigensolver for a distributed double-precision symmetric-definite eigenproblem of the form NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. NOTE: The matrix is assumed to be factorized; it is the result of a Cholesky factorization. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pdsygvd_factorized.html"},{"title":"dlaf_pdsygvd_partial_spectrum_factorized – DLA-Future-Fortran","text":"public  subroutine dlaf_pdsygvd_partial_spectrum_factorized(uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, il, iu, info) Generalized eigensolver for a distributed double-precision symmetric-definite eigenproblem of the form NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. NOTE: The matrix is assumed to be factorized; it is the result of a Cholesky factorization. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pdsygvd_partial_spectrum_factorized.html"},{"title":"dlaf_pchegvd – DLA-Future-Fortran","text":"public  subroutine dlaf_pchegvd(uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, info) Generalized eigensolver for a distributed single-precision Hermitian eigenproblem of the form NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . complex(kind=sp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pchegvd.html"},{"title":"dlaf_pchegvd_partial_spectrum – DLA-Future-Fortran","text":"public  subroutine dlaf_pchegvd_partial_spectrum(uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, il, iu, info) Generalized eigensolver for a distributed single-precision Hermitian eigenproblem of the form NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . complex(kind=sp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pchegvd_partial_spectrum.html"},{"title":"dlaf_pchegvd_factorized – DLA-Future-Fortran","text":"public  subroutine dlaf_pchegvd_factorized(uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, info) Generalized eigensolver for a distributed single-precision Hermitian eigenproblem of the form NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. NOTE: The matrix is assumed to be factorized; it is the result of a Cholesky factorization. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . complex(kind=sp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pchegvd_factorized.html"},{"title":"dlaf_pchegvd_partial_spectrum_factorized – DLA-Future-Fortran","text":"public  subroutine dlaf_pchegvd_partial_spectrum_factorized(uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, il, iu, info) Generalized eigensolver for a distributed single-precision Hermitian eigenproblem of the form NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. NOTE: The matrix is assumed to be factorized; it is the result of a Cholesky factorization. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . complex(kind=sp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pchegvd_partial_spectrum_factorized.html"},{"title":"dlaf_pzhegvd – DLA-Future-Fortran","text":"public  subroutine dlaf_pzhegvd(uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, info) Generalized eigensolver for a distributed double-precision Hermitian eigenproblem of the form NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . complex(kind=dp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pzhegvd.html"},{"title":"dlaf_pzhegvd_partial_spectrum – DLA-Future-Fortran","text":"public  subroutine dlaf_pzhegvd_partial_spectrum(uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, il, iu, info) Generalized eigensolver for a distributed double-precision Hermitian eigenproblem of the form NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . complex(kind=dp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pzhegvd_partial_spectrum.html"},{"title":"dlaf_pzhegvd_factorized – DLA-Future-Fortran","text":"public  subroutine dlaf_pzhegvd_factorized(uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, info) Generalized eigensolver for a distributed double-precision Hermitian eigenproblem of the form NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. NOTE: The matrix is assumed to be factorized; it is the result of a Cholesky factorization. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . complex(kind=dp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pzhegvd_factorized.html"},{"title":"dlaf_pzhegvd_partial_spectrum_factorized – DLA-Future-Fortran","text":"public  subroutine dlaf_pzhegvd_partial_spectrum_factorized(uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, il, iu, info) Generalized eigensolver for a distributed double-precision Hermitian eigenproblem of the form NOTE: The input matrix and the matrix of eigenvectors are assumed to be distributed in host memory. Moving to and from GPU memory is handled internally. NOTE: The vector of eigenvalues is assumed to be local (non-distributed) and in host memory Moving to and from GPU memory is handled internally. NOTE: The pika runtime is resumed when this function is called and suspended when the call terminates. NOTE: The matrix is assumed to be factorized; it is the result of a Cholesky factorization. Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . complex(kind=dp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. NOTE: Check restrictions on this parameter on the DLA-Future documentation, for the DLA-Future version you are using. integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"proc/dlaf_pzhegvd_partial_spectrum_factorized.html"},{"title":"dlaf_fortran – DLA-Future-Fortran","text":"DLA-Future Fortran interface Uses iso_c_binding iso_fortran_env Subroutines public  subroutine dlaf_initialize () Initialize DLA-Future and pika Read more… Arguments None public  subroutine dlaf_finalize () Finalize DLA-Future and pika Read more… Arguments None public  subroutine dlaf_create_grid_from_blacs (blacs_context) Create DLA-Future grid from existing BLACS context Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: blacs_context BLACS context public  subroutine dlaf_free_grid (blacs_context) Free DLA-Future grid corresponding to given BLACS context Read more… Arguments Type Intent Optional Attributes Name integer, intent(in) :: blacs_context BLACS context public  subroutine dlaf_pspotrf (uplo, n, a, ia, ja, desca, info) Cholesky decomposition for a distributed single-precision real symmetric positive definite matrix Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pdpotrf (uplo, n, a, ia, ja, desca, info) Cholesky decomposition for a distributed double-precision real symmetric positive definite matrix Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pcpotrf (uplo, n, a, ia, ja, desca, info) Cholesky decomposition for a distributed single-precision complex Hermitian positive definite matrix Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pzpotrf (uplo, n, a, ia, ja, desca, info) Cholesky decomposition for a distributed double-precision complex Hermitian positive definite matrix Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pssyevd (uplo, n, a, ia, ja, desca, w, z, iz, jz, descz, info) Eigensolver for a distributed single-precision real symmetric matrix . Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pssyevd_partial_spectrum (uplo, n, a, ia, ja, desca, w, z, iz, jz, descz, il, iu, info) Eigensolver for a distributed single-precision real symmetric matrix . Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. Read more… integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pdsyevd (uplo, n, a, ia, ja, desca, w, z, iz, jz, descz, info) Eigensolver for a distributed double-precision real symmetric matrix . Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pdsyevd_partial_spectrum (uplo, n, a, ia, ja, desca, w, z, iz, jz, descz, il, iu, info) Eigensolver for a distributed double-precision real symmetric matrix . Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. Read more… integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pcheevd (uplo, n, a, ia, ja, desca, w, z, iz, jz, descz, info) Eigensolver for a distributed single-precision complex Hermitian matrix . Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pcheevd_partial_spectrum (uplo, n, a, ia, ja, desca, w, z, iz, jz, descz, il, iu, info) Eigensolver for a distributed single-precision complex Hermitian matrix . Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. Read more… integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pzheevd (uplo, n, a, ia, ja, desca, w, z, iz, jz, descz, info) Eigensolver for a distributed double-precision complex Hermitian matrix . Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pzheevd_partial_spectrum (uplo, n, a, ia, ja, desca, w, z, iz, jz, descz, il, iu, info) Eigensolver for a distributed double-precision complex Hermitian matrix . Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. Read more… integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pssygvd (uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, info) Generalized eigensolver for a distributed single-precision symmetric-definite eigenproblem of the form Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pssygvd_partial_spectrum (uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, il, iu, info) Generalized eigensolver for a distributed single-precision symmetric-definite eigenproblem of the form Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. Read more… integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pssygvd_factorized (uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, info) Generalized eigensolver for a distributed single-precision symmetric-definite eigenproblem of the form Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pssygvd_partial_spectrum_factorized (uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, il, iu, info) Generalized eigensolver for a distributed single-precision symmetric-definite eigenproblem of the form Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. Read more… integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pdsygvd (uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, info) Generalized eigensolver for a distributed double-precision symmetric-definite eigenproblem of the form Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pdsygvd_partial_spectrum (uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, il, iu, info) Generalized eigensolver for a distributed double-precision symmetric-definite eigenproblem of the form Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. Read more… integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pdsygvd_factorized (uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, info) Generalized eigensolver for a distributed double-precision symmetric-definite eigenproblem of the form Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pdsygvd_partial_spectrum_factorized (uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, il, iu, info) Generalized eigensolver for a distributed double-precision symmetric-definite eigenproblem of the form Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. real(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. real(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. Read more… integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pchegvd (uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, info) Generalized eigensolver for a distributed single-precision Hermitian eigenproblem of the form Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . complex(kind=sp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pchegvd_partial_spectrum (uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, il, iu, info) Generalized eigensolver for a distributed single-precision Hermitian eigenproblem of the form Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . complex(kind=sp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. Read more… integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pchegvd_factorized (uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, info) Generalized eigensolver for a distributed single-precision Hermitian eigenproblem of the form Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . complex(kind=sp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pchegvd_partial_spectrum_factorized (uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, il, iu, info) Generalized eigensolver for a distributed single-precision Hermitian eigenproblem of the form Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=sp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . complex(kind=sp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=sp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=sp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. Read more… integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pzhegvd (uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, info) Generalized eigensolver for a distributed double-precision Hermitian eigenproblem of the form Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . complex(kind=dp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pzhegvd_partial_spectrum (uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, il, iu, info) Generalized eigensolver for a distributed double-precision Hermitian eigenproblem of the form Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . complex(kind=dp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. Read more… integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pzhegvd_factorized (uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, info) Generalized eigensolver for a distributed double-precision Hermitian eigenproblem of the form Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . complex(kind=dp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer, intent(out), target :: info 0 if the function completed successfully. public  subroutine dlaf_pzhegvd_partial_spectrum_factorized (uplo, n, a, ia, ja, desca, b, ib, jb, descb, w, z, iz, jz, descz, il, iu, info) Generalized eigensolver for a distributed double-precision Hermitian eigenproblem of the form Read more… Arguments Type Intent Optional Attributes Name character(len=1), intent(in) :: uplo Indicates whether the upper ( \"U\" ) or lower ( \"L\" ) triangular part of the global sub-matrix is referenced. Read more… integer, intent(in) :: n Order of the matrix sub-matrix used in the computation. complex(kind=dp), intent(inout), dimension(:, :), target :: a Local part of the global matrix . integer, intent(in) :: ia Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: ja Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: desca ScaLAPACK descriptor of the global matrix . complex(kind=dp), intent(inout), dimension(:, :), target :: b Local part of the global matrix . integer, intent(in) :: ib Row index of the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jb Column index of the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descb ScaLAPACK descriptor of the global matrix . real(kind=dp), intent(out), dimension(:), target :: w Local (non-distributed) vector of eigenvalues. complex(kind=dp), intent(inout), dimension(:, :), target :: z Local part of the global matrix . integer, intent(in) :: iz Row index in the global matrix identifying the first row of the sub-matrix . Read more… integer, intent(in) :: jz Column index in the global matrix identifying the first column of the sub-matrix . Read more… integer, intent(in), dimension(9) :: descz ScaLAPACK descriptor of the global matrix . integer(kind=i8), intent(in) :: il Index (from smallest to largest) of the smallest eigenvector to be computed. Read more… integer(kind=i8), intent(in) :: iu Index (from smallest to largest) of the largest eigenvector to be computed. integer, intent(out), target :: info 0 if the function completed successfully.","tags":"","url":"module/dlaf_fortran.html"},{"title":"dlaf_fortran.f90 – DLA-Future-Fortran","text":"Source Code ! ! Distributed Linear Algebra with Future (DLAF) ! ! Copyright (c) 2018-2025, ETH Zurich ! All rights reserved. ! ! Please, refer to the LICENSE file in the root directory. ! SPDX-License-Identifier: BSD-3-Clause ! module dlaf_fortran !! DLA-Future Fortran interface use iso_fortran_env , only : dp => real64 , sp => real32 , i8 => int64 use iso_c_binding , only : & c_char , & c_double , & c_int , & c_loc , & c_ptr , & c_ptrdiff_t , & c_signed_char , & c_null_char implicit none private public :: dlaf_initialize , dlaf_finalize public :: dlaf_create_grid_from_blacs , dlaf_free_grid public :: dlaf_pspotrf , dlaf_pdpotrf , dlaf_pcpotrf , dlaf_pzpotrf public :: dlaf_pssyevd , dlaf_pdsyevd , dlaf_pcheevd , dlaf_pzheevd public :: dlaf_pssyevd_partial_spectrum , dlaf_pdsyevd_partial_spectrum public :: dlaf_pcheevd_partial_spectrum , dlaf_pzheevd_partial_spectrum public :: dlaf_pssygvd , dlaf_pdsygvd , dlaf_pchegvd , dlaf_pzhegvd public :: dlaf_pssygvd_partial_spectrum , dlaf_pdsygvd_partial_spectrum public :: dlaf_pchegvd_partial_spectrum , dlaf_pzhegvd_partial_spectrum public :: dlaf_pssygvd_factorized , dlaf_pdsygvd_factorized , dlaf_pchegvd_factorized , dlaf_pzhegvd_factorized public :: dlaf_pssygvd_partial_spectrum_factorized , dlaf_pdsygvd_partial_spectrum_factorized public :: dlaf_pchegvd_partial_spectrum_factorized , dlaf_pzhegvd_partial_spectrum_factorized contains subroutine dlaf_initialize () !! Initialize DLA-Future and pika !! !! @note !! If DLA-Future has already been initialized, this function does nothing. !! @endnote integer , parameter :: dlaf_argc = 1 , pika_argc = 1 character ( len = 5 , kind = c_char ), allocatable , target :: dlaf_argv (:), pika_argv (:) type ( c_ptr ), allocatable , dimension (:) :: dlaf_argv_ptr , pika_argv_ptr interface subroutine dlaf_initialize_c ( pika_argc_ , pika_argv_ , dlaf_argc_ , dlaf_argv_ ) bind ( C , name = 'dlaf_initialize' ) import :: c_ptr , c_int type ( c_ptr ), dimension ( * ) :: pika_argv_ type ( c_ptr ), dimension ( * ) :: dlaf_argv_ integer ( kind = c_int ), value :: pika_argc_ integer ( kind = c_int ), value :: dlaf_argc_ end subroutine dlaf_initialize_c end interface allocate ( pika_argv ( pika_argc )) pika_argv ( 1 ) = \"dlaf\" // c_null_char allocate ( dlaf_argv ( dlaf_argc )) dlaf_argv ( 1 ) = \"dlaf\" // c_null_char allocate ( pika_argv_ptr ( pika_argc )) pika_argv_ptr ( 1 ) = c_loc ( pika_argv ( 1 )) allocate ( dlaf_argv_ptr ( dlaf_argc )) dlaf_argv_ptr ( 1 ) = c_loc ( dlaf_argv ( 1 )) call dlaf_initialize_c ( pika_argc , pika_argv_ptr , dlaf_argc , dlaf_argv_ptr ) end subroutine dlaf_initialize subroutine dlaf_finalize () !! Finalize DLA-Future and pika !! !! @note !! If DLA-Future has already been finalized, this function does nothing. !! @endnote interface subroutine dlaf_finalize_c () bind ( C , name = 'dlaf_finalize' ) end subroutine dlaf_finalize_c end interface call dlaf_finalize_c () end subroutine dlaf_finalize subroutine dlaf_create_grid_from_blacs ( blacs_context ) !! Create DLA-Future grid from existing BLACS context !! !! @warning !! The grid ordering is automatically inferred from the BLACS grid ordering. Only row-major and column-major !! grids are supported (created with `blacs_gridinit`). Grids created with `blacs_gridmap` are _not_ supported. !! @endwarning integer , intent ( in ) :: blacs_context !! BLACS context interface subroutine dlaf_create_grid_from_blacs_c ( blacs_contxt ) bind ( C , name = 'dlaf_create_grid_from_blacs' ) import :: c_int integer ( kind = c_int ), value :: blacs_contxt end subroutine dlaf_create_grid_from_blacs_c end interface call dlaf_create_grid_from_blacs_c ( blacs_context ) end subroutine dlaf_create_grid_from_blacs subroutine dlaf_free_grid ( blacs_context ) !! Free DLA-Future grid corresponding to given BLACS context !! !! @warning !! Only the DLA-Future internal grid is freed. The associated BLACS grid will need to be freed explicitly !! with `blacs_gridexit`. !! @endwarning integer , intent ( in ) :: blacs_context !! BLACS context interface subroutine dlaf_free_grid_c ( blacs_contxt ) bind ( C , name = 'dlaf_free_grid' ) import :: c_int integer ( kind = c_int ), value :: blacs_contxt end subroutine dlaf_free_grid_c end interface call dlaf_free_grid_c ( blacs_context ) end subroutine dlaf_free_grid subroutine dlaf_pspotrf ( uplo , n , a , ia , ja , desca , info ) !! Cholesky decomposition for a distributed single-precision real symmetric positive definite matrix \\mathbf{A} !! {!docs/snippets/note-host-matrix.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} real ( kind = sp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pspotrf_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , info_ ) & bind ( C , name = 'dlaf_pspotrf' ) import :: c_ptr , c_int , c_signed_char integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: ia_ , ja_ , n_ type ( c_ptr ), value :: info_ integer ( kind = c_int ), dimension ( * ) :: desca_ type ( c_ptr ), value :: a_ end subroutine dlaf_pspotrf_c end interface call dlaf_pspotrf_c ( iachar ( uplo , c_signed_char ), n , c_loc ( a ( 1 , 1 )), ia , ja , desca , c_loc ( info )) end subroutine dlaf_pspotrf subroutine dlaf_pdpotrf ( uplo , n , a , ia , ja , desca , info ) !! Cholesky decomposition for a distributed double-precision real symmetric positive definite matrix \\mathbf{A} !! {!docs/snippets/note-host-matrix.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} real ( kind = dp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pdpotrf_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , info_ ) & bind ( C , name = 'dlaf_pdpotrf' ) import :: c_ptr , c_int , c_double , c_signed_char integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: ia_ , ja_ , n_ type ( c_ptr ), value :: info_ integer ( kind = c_int ), dimension ( * ) :: desca_ type ( c_ptr ), value :: a_ end subroutine dlaf_pdpotrf_c end interface call dlaf_pdpotrf_c ( iachar ( uplo , c_signed_char ), n , c_loc ( a ( 1 , 1 )), ia , ja , desca , c_loc ( info )) end subroutine dlaf_pdpotrf subroutine dlaf_pcpotrf ( uplo , n , a , ia , ja , desca , info ) !! Cholesky decomposition for a distributed single-precision complex Hermitian positive definite matrix \\mathbf{A} !! {!docs/snippets/note-host-matrix.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} complex ( kind = sp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pcpotrf_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , info_ ) & bind ( C , name = 'dlaf_pcpotrf' ) import :: c_ptr , c_int , c_signed_char integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: ia_ , ja_ , n_ type ( c_ptr ), value :: info_ integer ( kind = c_int ), dimension ( * ) :: desca_ type ( c_ptr ), value :: a_ end subroutine dlaf_pcpotrf_c end interface call dlaf_pcpotrf_c ( iachar ( uplo , c_signed_char ), n , c_loc ( a ( 1 , 1 )), ia , ja , desca , c_loc ( info )) end subroutine dlaf_pcpotrf subroutine dlaf_pzpotrf ( uplo , n , a , ia , ja , desca , info ) !! Cholesky decomposition for a distributed double-precision complex Hermitian positive definite matrix \\mathbf{A} !! {!docs/snippets/note-host-matrix.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} complex ( kind = dp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pzpotrf_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , info_ ) & bind ( C , name = 'dlaf_pzpotrf' ) import :: c_ptr , c_int , c_signed_char integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: ia_ , ja_ , n_ type ( c_ptr ), value :: info_ integer ( kind = c_int ), dimension ( * ) :: desca_ type ( c_ptr ), value :: a_ end subroutine dlaf_pzpotrf_c end interface call dlaf_pzpotrf_c ( iachar ( uplo , c_signed_char ), n , c_loc ( a ( 1 , 1 )), ia , ja , desca , c_loc ( info )) end subroutine dlaf_pzpotrf subroutine dlaf_pssyevd ( uplo , n , a , ia , ja , desca , w , z , iz , jz , descz , info ) !! {!docs/snippets/pssyevd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} real ( kind = sp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} real ( kind = sp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} real ( kind = sp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pssyevd_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , w_ , z_ , iz_ , jz_ , descz_ , info_ ) & bind ( C , name = 'dlaf_pssyevd' ) import :: c_int , c_ptr , c_signed_char integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , iz_ , jz_ type ( c_ptr ), value :: a_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pssyevd_c end interface info = - 1 call dlaf_pssyevd_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & c_loc ( info ) & ) end subroutine dlaf_pssyevd subroutine dlaf_pssyevd_partial_spectrum ( uplo , n , a , ia , ja , desca , w , z , iz , jz , descz , il , iu , info ) !! {!docs/snippets/pssyevd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} real ( kind = sp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} real ( kind = sp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} real ( kind = sp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer ( kind = i8 ), intent ( in ) :: il !! {!docs/snippets/il.md!} integer ( kind = i8 ), intent ( in ) :: iu !! {!docs/snippets/iu.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pssyevd_ps_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , w_ , z_ , iz_ , jz_ , descz_ , il_ , iu_ , info_ ) & bind ( C , name = 'dlaf_pssyevd_partial_spectrum' ) import :: c_int , c_ptr , c_signed_char , c_ptrdiff_t integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , iz_ , jz_ integer ( kind = c_ptrdiff_t ), value :: il_ , iu_ type ( c_ptr ), value :: a_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pssyevd_ps_c end interface info = - 1 call dlaf_pssyevd_ps_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & il , iu , & c_loc ( info ) & ) end subroutine dlaf_pssyevd_partial_spectrum subroutine dlaf_pdsyevd ( uplo , n , a , ia , ja , desca , w , z , iz , jz , descz , info ) !! {!docs/snippets/pdsyevd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} real ( kind = dp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} real ( kind = dp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} real ( kind = dp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pdsyevd_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , w_ , z_ , iz_ , jz_ , descz_ , info_ ) & bind ( C , name = 'dlaf_pdsyevd' ) import :: c_int , c_ptr , c_signed_char integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , iz_ , jz_ type ( c_ptr ), value :: a_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pdsyevd_c end interface info = - 1 call dlaf_pdsyevd_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & c_loc ( info ) & ) end subroutine dlaf_pdsyevd subroutine dlaf_pdsyevd_partial_spectrum ( uplo , n , a , ia , ja , desca , w , z , iz , jz , descz , il , iu , info ) !! {!docs/snippets/pdsyevd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} real ( kind = dp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} real ( kind = dp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} real ( kind = dp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer ( kind = i8 ), intent ( in ) :: il !! {!docs/snippets/il.md!} integer ( kind = i8 ), intent ( in ) :: iu !! {!docs/snippets/iu.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pdsyevd_ps_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , w_ , z_ , iz_ , jz_ , descz_ , il_ , iu_ , info_ ) & bind ( C , name = 'dlaf_pdsyevd_partial_spectrum' ) import :: c_int , c_ptr , c_signed_char , c_ptrdiff_t integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , iz_ , jz_ integer ( kind = c_ptrdiff_t ), value :: il_ , iu_ type ( c_ptr ), value :: a_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pdsyevd_ps_c end interface info = - 1 call dlaf_pdsyevd_ps_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & il , iu , & c_loc ( info ) & ) end subroutine dlaf_pdsyevd_partial_spectrum subroutine dlaf_pcheevd ( uplo , n , a , ia , ja , desca , w , z , iz , jz , descz , info ) !! {!docs/snippets/pcheevd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} complex ( kind = sp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} real ( kind = sp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} complex ( kind = sp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pcheevd_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , w_ , z_ , iz_ , jz_ , descz_ , info_ ) & bind ( C , name = 'dlaf_pcheevd' ) import :: c_int , c_ptr , c_signed_char integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , iz_ , jz_ type ( c_ptr ), value :: a_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pcheevd_c end interface info = - 1 call dlaf_pcheevd_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & c_loc ( info ) & ) end subroutine dlaf_pcheevd subroutine dlaf_pcheevd_partial_spectrum ( uplo , n , a , ia , ja , desca , w , z , iz , jz , descz , il , iu , info ) !! {!docs/snippets/pcheevd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} complex ( kind = sp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} real ( kind = sp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} complex ( kind = sp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer ( kind = i8 ), intent ( in ) :: il !! {!docs/snippets/il.md!} integer ( kind = i8 ), intent ( in ) :: iu !! {!docs/snippets/iu.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pcheevd_ps_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , w_ , z_ , iz_ , jz_ , descz_ , il_ , iu_ , info_ ) & bind ( C , name = 'dlaf_pcheevd_partial_spectrum' ) import :: c_int , c_ptr , c_signed_char , c_ptrdiff_t integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , iz_ , jz_ integer ( kind = c_ptrdiff_t ), value :: il_ , iu_ type ( c_ptr ), value :: a_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pcheevd_ps_c end interface info = - 1 call dlaf_pcheevd_ps_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & il , iu , & c_loc ( info ) & ) end subroutine dlaf_pcheevd_partial_spectrum subroutine dlaf_pzheevd ( uplo , n , a , ia , ja , desca , w , z , iz , jz , descz , info ) !! {!docs/snippets/pzheevd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} complex ( kind = dp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} real ( kind = dp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} complex ( kind = dp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pzheevd_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , w_ , z_ , iz_ , jz_ , descz_ , info_ ) & bind ( C , name = 'dlaf_pzheevd' ) import :: c_int , c_ptr , c_signed_char integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , iz_ , jz_ type ( c_ptr ), value :: a_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pzheevd_c end interface info = - 1 call dlaf_pzheevd_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & c_loc ( info ) & ) end subroutine dlaf_pzheevd subroutine dlaf_pzheevd_partial_spectrum ( uplo , n , a , ia , ja , desca , w , z , iz , jz , descz , il , iu , info ) !! {!docs/snippets/pzheevd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} complex ( kind = dp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} real ( kind = dp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} complex ( kind = dp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer ( kind = i8 ), intent ( in ) :: il !! {!docs/snippets/il.md!} integer ( kind = i8 ), intent ( in ) :: iu !! {!docs/snippets/iu.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pzheevd_ps_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , w_ , z_ , iz_ , jz_ , descz_ , il_ , iu_ , info_ ) & bind ( C , name = 'dlaf_pzheevd_partial_spectrum' ) import :: c_int , c_ptr , c_signed_char , c_ptrdiff_t integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , iz_ , jz_ integer ( kind = c_ptrdiff_t ), value :: il_ , iu_ type ( c_ptr ), value :: a_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pzheevd_ps_c end interface info = - 1 call dlaf_pzheevd_ps_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & il , iu , & c_loc ( info ) & ) end subroutine dlaf_pzheevd_partial_spectrum subroutine dlaf_pssygvd ( uplo , n , a , ia , ja , desca , b , ib , jb , descb , w , z , iz , jz , descz , info ) !! {!docs/snippets/pssygvd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} real ( kind = sp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} real ( kind = sp ), dimension (:, :), target , intent ( inout ) :: b !! {!docs/snippets/b.md!} integer , intent ( in ) :: ib !! {!docs/snippets/ib.md!} integer , intent ( in ) :: jb !! {!docs/snippets/jb.md!} integer , dimension ( 9 ), intent ( in ) :: descb !! {!docs/snippets/descb.md!} real ( kind = sp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} real ( kind = sp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pssygvd_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , b_ , ib_ , jb_ , descb_ , w_ , z_ , iz_ , jz_ , descz_ , info_ ) & bind ( C , name = 'dlaf_pssygvd' ) import :: c_int , c_ptr , c_signed_char integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , ib_ , jb_ , iz_ , jz_ type ( c_ptr ), value :: a_ , b_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descb_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pssygvd_c end interface info = - 1 call dlaf_pssygvd_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( b ( 1 , 1 )), ib , jb , descb , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & c_loc ( info ) & ) end subroutine dlaf_pssygvd subroutine dlaf_pssygvd_partial_spectrum ( uplo , n , a , ia , ja , desca , b , ib , jb , descb , w , z , iz , jz , descz , il , iu , info ) !! {!docs/snippets/pssygvd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} real ( kind = sp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} real ( kind = sp ), dimension (:, :), target , intent ( inout ) :: b !! {!docs/snippets/b.md!} integer , intent ( in ) :: ib !! {!docs/snippets/ib.md!} integer , intent ( in ) :: jb !! {!docs/snippets/jb.md!} integer , dimension ( 9 ), intent ( in ) :: descb !! {!docs/snippets/descb.md!} real ( kind = sp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} real ( kind = sp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer ( kind = i8 ), intent ( in ) :: il !! {!docs/snippets/il.md!} integer ( kind = i8 ), intent ( in ) :: iu !! {!docs/snippets/iu.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pssygvd_ps_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , b_ , ib_ , jb_ , descb_ , w_ , z_ , iz_ , jz_ , descz_ , il_ , iu_ , info_ ) & bind ( C , name = 'dlaf_pssygvd_partial_spectrum' ) import :: c_int , c_ptr , c_signed_char , c_ptrdiff_t integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , ib_ , jb_ , iz_ , jz_ integer ( kind = c_ptrdiff_t ), value :: il_ , iu_ type ( c_ptr ), value :: a_ , b_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descb_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pssygvd_ps_c end interface info = - 1 call dlaf_pssygvd_ps_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( b ( 1 , 1 )), ib , jb , descb , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & il , iu , & c_loc ( info ) & ) end subroutine dlaf_pssygvd_partial_spectrum subroutine dlaf_pssygvd_factorized ( uplo , n , a , ia , ja , desca , b , ib , jb , descb , w , z , iz , jz , descz , info ) !! {!docs/snippets/pssygvd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} !! {!docs/snippets/note-b-factorized.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} real ( kind = sp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} real ( kind = sp ), dimension (:, :), target , intent ( inout ) :: b !! {!docs/snippets/b.md!} integer , intent ( in ) :: ib !! {!docs/snippets/ib.md!} integer , intent ( in ) :: jb !! {!docs/snippets/jb.md!} integer , dimension ( 9 ), intent ( in ) :: descb !! {!docs/snippets/descb.md!} real ( kind = sp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} real ( kind = sp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pssygvd_factorized_c ( & uplo_ , n_ , a_ , ia_ , ja_ , desca_ , b_ , ib_ , jb_ , descb_ , w_ , z_ , iz_ , jz_ , descz_ , info_ & ) & bind ( C , name = 'dlaf_pssygvd_factorized' ) import :: c_int , c_ptr , c_signed_char integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , ib_ , jb_ , iz_ , jz_ type ( c_ptr ), value :: a_ , b_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descb_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pssygvd_factorized_c end interface info = - 1 call dlaf_pssygvd_factorized_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( b ( 1 , 1 )), ib , jb , descb , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & c_loc ( info ) & ) end subroutine dlaf_pssygvd_factorized subroutine dlaf_pssygvd_partial_spectrum_factorized ( uplo , n , a , ia , ja , desca , b , ib , jb , descb , w , z , iz , jz , descz , il , iu , info ) !! {!docs/snippets/pssygvd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} !! {!docs/snippets/note-b-factorized.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} real ( kind = sp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} real ( kind = sp ), dimension (:, :), target , intent ( inout ) :: b !! {!docs/snippets/b.md!} integer , intent ( in ) :: ib !! {!docs/snippets/ib.md!} integer , intent ( in ) :: jb !! {!docs/snippets/jb.md!} integer , dimension ( 9 ), intent ( in ) :: descb !! {!docs/snippets/descb.md!} real ( kind = sp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} real ( kind = sp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer ( kind = i8 ), intent ( in ) :: il !! {!docs/snippets/il.md!} integer ( kind = i8 ), intent ( in ) :: iu !! {!docs/snippets/iu.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pssygvd_ps_factorized_c ( & uplo_ , n_ , a_ , ia_ , ja_ , desca_ , b_ , ib_ , jb_ , descb_ , w_ , z_ , iz_ , jz_ , descz_ , il_ , iu_ , info_ & ) & bind ( C , name = 'dlaf_pssygvd_partial_spectrum_factorized' ) import :: c_int , c_ptr , c_signed_char , c_ptrdiff_t integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , ib_ , jb_ , iz_ , jz_ integer ( kind = c_ptrdiff_t ), value :: il_ , iu_ type ( c_ptr ), value :: a_ , b_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descb_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pssygvd_ps_factorized_c end interface info = - 1 call dlaf_pssygvd_ps_factorized_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( b ( 1 , 1 )), ib , jb , descb , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & il , iu , & c_loc ( info ) & ) end subroutine dlaf_pssygvd_partial_spectrum_factorized subroutine dlaf_pdsygvd ( uplo , n , a , ia , ja , desca , b , ib , jb , descb , w , z , iz , jz , descz , info ) !! {!docs/snippets/pdsygvd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} real ( kind = dp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} real ( kind = dp ), dimension (:, :), target , intent ( inout ) :: b !! {!docs/snippets/b.md!} integer , intent ( in ) :: ib !! {!docs/snippets/ib.md!} integer , intent ( in ) :: jb !! {!docs/snippets/jb.md!} integer , dimension ( 9 ), intent ( in ) :: descb !! {!docs/snippets/descb.md!} real ( kind = dp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} real ( kind = dp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pdsygvd_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , b_ , ib_ , jb_ , descb_ , w_ , z_ , iz_ , jz_ , descz_ , info_ ) & bind ( C , name = 'dlaf_pdsygvd' ) import :: c_int , c_ptr , c_signed_char integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , ib_ , jb_ , iz_ , jz_ type ( c_ptr ), value :: a_ , b_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descb_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pdsygvd_c end interface info = - 1 call dlaf_pdsygvd_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( b ( 1 , 1 )), ib , jb , descb , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & c_loc ( info ) & ) end subroutine dlaf_pdsygvd subroutine dlaf_pdsygvd_partial_spectrum ( uplo , n , a , ia , ja , desca , b , ib , jb , descb , w , z , iz , jz , descz , il , iu , info ) !! {!docs/snippets/pdsygvd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} real ( kind = dp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} real ( kind = dp ), dimension (:, :), target , intent ( inout ) :: b !! {!docs/snippets/b.md!} integer , intent ( in ) :: ib !! {!docs/snippets/ib.md!} integer , intent ( in ) :: jb !! {!docs/snippets/jb.md!} integer , dimension ( 9 ), intent ( in ) :: descb !! {!docs/snippets/descb.md!} real ( kind = dp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} real ( kind = dp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer ( kind = i8 ), intent ( in ) :: il !! {!docs/snippets/il.md!} integer ( kind = i8 ), intent ( in ) :: iu !! {!docs/snippets/iu.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pdsygvd_ps_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , b_ , ib_ , jb_ , descb_ , w_ , z_ , iz_ , jz_ , descz_ , il_ , iu_ , info_ ) & bind ( C , name = 'dlaf_pdsygvd_partial_spectrum' ) import :: c_int , c_ptr , c_signed_char , c_ptrdiff_t integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , ib_ , jb_ , iz_ , jz_ integer ( kind = c_ptrdiff_t ), value :: il_ , iu_ type ( c_ptr ), value :: a_ , b_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descb_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pdsygvd_ps_c end interface info = - 1 call dlaf_pdsygvd_ps_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( b ( 1 , 1 )), ib , jb , descb , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & il , iu , & c_loc ( info ) & ) end subroutine dlaf_pdsygvd_partial_spectrum subroutine dlaf_pdsygvd_factorized ( uplo , n , a , ia , ja , desca , b , ib , jb , descb , w , z , iz , jz , descz , info ) !! {!docs/snippets/pdsygvd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} !! {!docs/snippets/note-b-factorized.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} real ( kind = dp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} real ( kind = dp ), dimension (:, :), target , intent ( inout ) :: b !! {!docs/snippets/b.md!} integer , intent ( in ) :: ib !! {!docs/snippets/ib.md!} integer , intent ( in ) :: jb !! {!docs/snippets/jb.md!} integer , dimension ( 9 ), intent ( in ) :: descb !! {!docs/snippets/descb.md!} real ( kind = dp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} real ( kind = dp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pdsygvd_factorized_c ( & uplo_ , n_ , a_ , ia_ , ja_ , desca_ , b_ , ib_ , jb_ , descb_ , w_ , z_ , iz_ , jz_ , descz_ , info_ & ) & bind ( C , name = 'dlaf_pdsygvd_factorized' ) import :: c_int , c_ptr , c_signed_char integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , ib_ , jb_ , iz_ , jz_ type ( c_ptr ), value :: a_ , b_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descb_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pdsygvd_factorized_c end interface info = - 1 call dlaf_pdsygvd_factorized_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( b ( 1 , 1 )), ib , jb , descb , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & c_loc ( info ) & ) end subroutine dlaf_pdsygvd_factorized subroutine dlaf_pdsygvd_partial_spectrum_factorized ( uplo , n , a , ia , ja , desca , b , ib , jb , descb , w , z , iz , jz , descz , il , iu , info ) !! {!docs/snippets/pdsygvd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} !! {!docs/snippets/note-b-factorized.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} real ( kind = dp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} real ( kind = dp ), dimension (:, :), target , intent ( inout ) :: b !! {!docs/snippets/b.md!} integer , intent ( in ) :: ib !! {!docs/snippets/ib.md!} integer , intent ( in ) :: jb !! {!docs/snippets/jb.md!} integer , dimension ( 9 ), intent ( in ) :: descb !! {!docs/snippets/descb.md!} real ( kind = dp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} real ( kind = dp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer ( kind = i8 ), intent ( in ) :: il !! {!docs/snippets/il.md!} integer ( kind = i8 ), intent ( in ) :: iu !! {!docs/snippets/iu.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pdsygvd_ps_factorized_c ( & uplo_ , n_ , a_ , ia_ , ja_ , desca_ , b_ , ib_ , jb_ , descb_ , w_ , z_ , iz_ , jz_ , descz_ , il_ , iu_ , info_ & ) & bind ( C , name = 'dlaf_pdsygvd_partial_spectrum_factorized' ) import :: c_int , c_ptr , c_signed_char , c_ptrdiff_t integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , ib_ , jb_ , iz_ , jz_ integer ( kind = c_ptrdiff_t ), value :: il_ , iu_ type ( c_ptr ), value :: a_ , b_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descb_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pdsygvd_ps_factorized_c end interface info = - 1 call dlaf_pdsygvd_ps_factorized_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( b ( 1 , 1 )), ib , jb , descb , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & il , iu , & c_loc ( info ) & ) end subroutine dlaf_pdsygvd_partial_spectrum_factorized subroutine dlaf_pchegvd ( uplo , n , a , ia , ja , desca , b , ib , jb , descb , w , z , iz , jz , descz , info ) !! {!docs/snippets/pchegvd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} complex ( kind = sp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} complex ( kind = sp ), dimension (:, :), target , intent ( inout ) :: b !! {!docs/snippets/b.md!} integer , intent ( in ) :: ib !! {!docs/snippets/ib.md!} integer , intent ( in ) :: jb !! {!docs/snippets/jb.md!} integer , dimension ( 9 ), intent ( in ) :: descb !! {!docs/snippets/descb.md!} real ( kind = sp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} complex ( kind = sp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pchegvd_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , b_ , ib_ , jb_ , descb_ , w_ , z_ , iz_ , jz_ , descz_ , info_ ) & bind ( C , name = 'dlaf_pchegvd' ) import :: c_int , c_ptr , c_signed_char integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , ib_ , jb_ , iz_ , jz_ type ( c_ptr ), value :: a_ , b_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descb_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pchegvd_c end interface info = - 1 call dlaf_pchegvd_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( b ( 1 , 1 )), ib , jb , descb , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & c_loc ( info ) & ) end subroutine dlaf_pchegvd subroutine dlaf_pchegvd_partial_spectrum ( uplo , n , a , ia , ja , desca , b , ib , jb , descb , w , z , iz , jz , descz , il , iu , info ) !! {!docs/snippets/pchegvd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} complex ( kind = sp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} complex ( kind = sp ), dimension (:, :), target , intent ( inout ) :: b !! {!docs/snippets/b.md!} integer , intent ( in ) :: ib !! {!docs/snippets/ib.md!} integer , intent ( in ) :: jb !! {!docs/snippets/jb.md!} integer , dimension ( 9 ), intent ( in ) :: descb !! {!docs/snippets/descb.md!} real ( kind = sp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} complex ( kind = sp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer ( kind = i8 ), intent ( in ) :: il !! {!docs/snippets/il.md!} integer ( kind = i8 ), intent ( in ) :: iu !! {!docs/snippets/iu.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pchegvd_ps_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , b_ , ib_ , jb_ , descb_ , w_ , z_ , iz_ , jz_ , descz_ , il_ , iu_ , info_ ) & bind ( C , name = 'dlaf_pchegvd_partial_spectrum' ) import :: c_int , c_ptr , c_signed_char , c_ptrdiff_t integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , ib_ , jb_ , iz_ , jz_ integer ( kind = c_ptrdiff_t ), value :: il_ , iu_ type ( c_ptr ), value :: a_ , b_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descb_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pchegvd_ps_c end interface info = - 1 call dlaf_pchegvd_ps_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( b ( 1 , 1 )), ib , jb , descb , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & il , iu , & c_loc ( info ) & ) end subroutine dlaf_pchegvd_partial_spectrum subroutine dlaf_pchegvd_factorized ( uplo , n , a , ia , ja , desca , b , ib , jb , descb , w , z , iz , jz , descz , info ) !! {!docs/snippets/pchegvd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} !! {!docs/snippets/note-b-factorized.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} complex ( kind = sp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} complex ( kind = sp ), dimension (:, :), target , intent ( inout ) :: b !! {!docs/snippets/b.md!} integer , intent ( in ) :: ib !! {!docs/snippets/ib.md!} integer , intent ( in ) :: jb !! {!docs/snippets/jb.md!} integer , dimension ( 9 ), intent ( in ) :: descb !! {!docs/snippets/descb.md!} real ( kind = sp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} complex ( kind = sp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pchegvd_factorized_c ( & uplo_ , n_ , a_ , ia_ , ja_ , desca_ , b_ , ib_ , jb_ , descb_ , w_ , z_ , iz_ , jz_ , descz_ , info_ & ) & bind ( C , name = 'dlaf_pchegvd_factorized' ) import :: c_int , c_ptr , c_signed_char integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , ib_ , jb_ , iz_ , jz_ type ( c_ptr ), value :: a_ , b_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descb_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pchegvd_factorized_c end interface info = - 1 call dlaf_pchegvd_factorized_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( b ( 1 , 1 )), ib , jb , descb , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & c_loc ( info ) & ) end subroutine dlaf_pchegvd_factorized subroutine dlaf_pchegvd_partial_spectrum_factorized ( uplo , n , a , ia , ja , desca , b , ib , jb , descb , w , z , iz , jz , descz , il , iu , info ) !! {!docs/snippets/pchegvd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} !! {!docs/snippets/note-b-factorized.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} complex ( kind = sp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} complex ( kind = sp ), dimension (:, :), target , intent ( inout ) :: b !! {!docs/snippets/b.md!} integer , intent ( in ) :: ib !! {!docs/snippets/ib.md!} integer , intent ( in ) :: jb !! {!docs/snippets/jb.md!} integer , dimension ( 9 ), intent ( in ) :: descb !! {!docs/snippets/descb.md!} real ( kind = sp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} complex ( kind = sp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer ( kind = i8 ), intent ( in ) :: il !! {!docs/snippets/il.md!} integer ( kind = i8 ), intent ( in ) :: iu !! {!docs/snippets/iu.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pchegvd_ps_factorized_c ( & uplo_ , n_ , a_ , ia_ , ja_ , desca_ , b_ , ib_ , jb_ , descb_ , w_ , z_ , iz_ , jz_ , descz_ , il_ , iu_ , info_ & ) & bind ( C , name = 'dlaf_pchegvd_partial_spectrum_factorized' ) import :: c_int , c_ptr , c_signed_char , c_ptrdiff_t integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , ib_ , jb_ , iz_ , jz_ integer ( kind = c_ptrdiff_t ), value :: il_ , iu_ type ( c_ptr ), value :: a_ , b_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descb_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pchegvd_ps_factorized_c end interface info = - 1 call dlaf_pchegvd_ps_factorized_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( b ( 1 , 1 )), ib , jb , descb , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & il , iu , & c_loc ( info ) & ) end subroutine dlaf_pchegvd_partial_spectrum_factorized subroutine dlaf_pzhegvd ( uplo , n , a , ia , ja , desca , b , ib , jb , descb , w , z , iz , jz , descz , info ) !! {!docs/snippets/pzhegvd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} complex ( kind = dp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} complex ( kind = dp ), dimension (:, :), target , intent ( inout ) :: b !! {!docs/snippets/b.md!} integer , intent ( in ) :: ib !! {!docs/snippets/ib.md!} integer , intent ( in ) :: jb !! {!docs/snippets/jb.md!} integer , dimension ( 9 ), intent ( in ) :: descb !! {!docs/snippets/descb.md!} real ( kind = dp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} complex ( kind = dp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pzhegvd_c ( uplo_ , n_ , a_ , ia_ , ja_ , desca_ , b_ , ib_ , jb_ , descb_ , w_ , z_ , iz_ , jz_ , descz_ , info_ ) & bind ( C , name = 'dlaf_pzhegvd' ) import :: c_int , c_ptr , c_signed_char integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , ib_ , jb_ , iz_ , jz_ type ( c_ptr ), value :: a_ , b_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descb_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pzhegvd_c end interface info = - 1 call dlaf_pzhegvd_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( b ( 1 , 1 )), ib , jb , descb , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & c_loc ( info ) & ) end subroutine dlaf_pzhegvd subroutine dlaf_pzhegvd_partial_spectrum ( uplo , n , a , ia , ja , desca , b , ib , jb , descb , w , z , iz , jz , descz , il , iu , info ) !! {!docs/snippets/pzhegvd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} complex ( kind = dp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} complex ( kind = dp ), dimension (:, :), target , intent ( inout ) :: b !! {!docs/snippets/b.md!} integer , intent ( in ) :: ib !! {!docs/snippets/ib.md!} integer , intent ( in ) :: jb !! {!docs/snippets/jb.md!} integer , dimension ( 9 ), intent ( in ) :: descb !! {!docs/snippets/descb.md!} real ( kind = dp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} complex ( kind = dp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer ( kind = i8 ), intent ( in ) :: il !! {!docs/snippets/il.md!} integer ( kind = i8 ), intent ( in ) :: iu !! {!docs/snippets/iu.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pzhegvd_ps_c ( & uplo_ , n_ , a_ , ia_ , ja_ , desca_ , b_ , ib_ , jb_ , descb_ , w_ , z_ , iz_ , jz_ , descz_ , il_ , iu_ , info_ & ) & bind ( C , name = 'dlaf_pzhegvd_partial_spectrum' ) import :: c_int , c_ptr , c_signed_char , c_ptrdiff_t integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , ib_ , jb_ , iz_ , jz_ integer ( kind = c_ptrdiff_t ), value :: il_ , iu_ type ( c_ptr ), value :: a_ , b_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descb_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pzhegvd_ps_c end interface info = - 1 call dlaf_pzhegvd_ps_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( b ( 1 , 1 )), ib , jb , descb , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & il , iu , & c_loc ( info ) & ) end subroutine dlaf_pzhegvd_partial_spectrum subroutine dlaf_pzhegvd_factorized ( uplo , n , a , ia , ja , desca , b , ib , jb , descb , w , z , iz , jz , descz , info ) !! {!docs/snippets/pzhegvd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} !! {!docs/snippets/note-b-factorized.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} complex ( kind = dp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} complex ( kind = dp ), dimension (:, :), target , intent ( inout ) :: b !! {!docs/snippets/b.md!} integer , intent ( in ) :: ib !! {!docs/snippets/ib.md!} integer , intent ( in ) :: jb !! {!docs/snippets/jb.md!} integer , dimension ( 9 ), intent ( in ) :: descb !! {!docs/snippets/descb.md!} real ( kind = dp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} complex ( kind = dp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pzhegvd_factorized_c ( & uplo_ , n_ , a_ , ia_ , ja_ , desca_ , b_ , ib_ , jb_ , descb_ , w_ , z_ , iz_ , jz_ , descz_ , info_ & ) & bind ( C , name = 'dlaf_pzhegvd_factorized' ) import :: c_int , c_ptr , c_signed_char integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , ib_ , jb_ , iz_ , jz_ type ( c_ptr ), value :: a_ , b_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descb_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pzhegvd_factorized_c end interface info = - 1 call dlaf_pzhegvd_factorized_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( b ( 1 , 1 )), ib , jb , descb , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & c_loc ( info ) & ) end subroutine dlaf_pzhegvd_factorized subroutine dlaf_pzhegvd_partial_spectrum_factorized ( & uplo , n , a , ia , ja , desca , b , ib , jb , descb , w , z , iz , jz , descz , il , iu , info & ) !! {!docs/snippets/pzhegvd.md!} !! {!docs/snippets/note-host-matrix.md!} !! {!docs/snippets/note-local-evals.md!} !! {!docs/snippets/note-pika.md!} !! {!docs/snippets/note-b-factorized.md!} character , intent ( in ) :: uplo !! {!docs/snippets/uplo-w-note.md!} integer , intent ( in ) :: n !! {!docs/snippets/n.md!} complex ( kind = dp ), dimension (:, :), target , intent ( inout ) :: a !! {!docs/snippets/a.md!} integer , intent ( in ) :: ia !! {!docs/snippets/ia.md!} integer , intent ( in ) :: ja !! {!docs/snippets/ja.md!} integer , dimension ( 9 ), intent ( in ) :: desca !! {!docs/snippets/desca.md!} complex ( kind = dp ), dimension (:, :), target , intent ( inout ) :: b !! {!docs/snippets/b.md!} integer , intent ( in ) :: ib !! {!docs/snippets/ib.md!} integer , intent ( in ) :: jb !! {!docs/snippets/jb.md!} integer , dimension ( 9 ), intent ( in ) :: descb !! {!docs/snippets/descb.md!} real ( kind = dp ), dimension (:), target , intent ( out ) :: w !! {!docs/snippets/w.md!} complex ( kind = dp ), dimension (:, :), target , intent ( inout ) :: z !! {!docs/snippets/z.md!} integer , intent ( in ) :: iz !! {!docs/snippets/iz.md!} integer , intent ( in ) :: jz !! {!docs/snippets/jz.md!} integer , dimension ( 9 ), intent ( in ) :: descz !! {!docs/snippets/descz.md!} integer ( kind = i8 ), intent ( in ) :: il !! {!docs/snippets/il.md!} integer ( kind = i8 ), intent ( in ) :: iu !! {!docs/snippets/iu.md!} integer , target , intent ( out ) :: info !! {!docs/snippets/info.md!} interface subroutine dlaf_pzhegvd_ps_factorized_c ( & uplo_ , n_ , a_ , ia_ , ja_ , desca_ , b_ , ib_ , jb_ , descb_ , w_ , z_ , iz_ , jz_ , descz_ , il_ , iu_ , info_ & ) & bind ( C , name = 'dlaf_pzhegvd_partial_spectrum_factorized' ) import :: c_int , c_ptr , c_signed_char , c_ptrdiff_t integer ( kind = c_signed_char ), value :: uplo_ integer ( kind = c_int ), value :: n_ , ia_ , ja_ , ib_ , jb_ , iz_ , jz_ integer ( kind = c_ptrdiff_t ), value :: il_ , iu_ type ( c_ptr ), value :: a_ , b_ , w_ , z_ integer ( kind = c_int ), dimension ( 9 ) :: desca_ , descb_ , descz_ type ( c_ptr ), value :: info_ end subroutine dlaf_pzhegvd_ps_factorized_c end interface info = - 1 call dlaf_pzhegvd_ps_factorized_c ( iachar ( uplo , c_signed_char ), n , & c_loc ( a ( 1 , 1 )), ia , ja , desca , & c_loc ( b ( 1 , 1 )), ib , jb , descb , & c_loc ( w ( 1 )), & c_loc ( z ( 1 , 1 )), iz , jz , descz , & il , iu , & c_loc ( info ) & ) end subroutine dlaf_pzhegvd_partial_spectrum_factorized end module dlaf_fortran","tags":"","url":"sourcefile/dlaf_fortran.f90.html"}]}